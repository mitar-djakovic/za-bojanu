enum HttpStatusCode {
	CONTINUE = 100,
	SWITCHING_PROTOCOLS = 101,
	PROCESSING = 102,
	EARLY_HINTS = 103,

	OK = 200,
	CREATED = 201,
	ACCEPTED = 202,
	NON_AUTHORITATIVE_INFORMATION = 203,
	NO_CONTENT = 204,
	RESET_CONTENT = 205,
	PARTIAL_CONTENT = 206,
	MULTI_STATUS = 207,
	ALREADY_REPORTED = 208,
	IM_USED = 226,

	MULTIPLE_CHOICES = 300,
	MOVED_PERMANENTLY = 301,
	FOUND = 302,
	SEE_OTHER = 303,
	NOT_MODIFIED = 304,
	USE_PROXY = 305,
	TEMPORARY_REDIRECT = 307,
	PERMANENT_REDIRECT = 308,

	BAD_REQUEST = 400,
	UNAUTHORIZED = 401,
	PAYMENT_REQUIRED = 402,
	FORBIDDEN = 403,
	NOT_FOUND = 404,
	METHOD_NOT_ALLOWED = 405,
	NOT_ACCEPTABLE = 406,
	PROXY_AUTHENTICATION_REQUIRED = 407,
	REQUEST_TIMEOUT = 408,
	CONFLICT = 409,
	GONE = 410,
	LENGTH_REQUIRED = 411,
	PRECONDITION_FAILED = 412,
	PAYLOAD_TOO_LARGE = 413,
	URI_TOO_LONG = 414,
	UNSUPPORTED_MEDIA_TYPE = 415,
	RANGE_NOT_SATISFIABLE = 416,
	EXPECTATION_FAILED = 417,
	I_AM_A_TEAPOT = 418,
	MISDIRECTED_REQUEST = 421,
	UNPROCESSABLE_ENTITY = 422,
	LOCKED = 423,
	FAILED_DEPENDENCY = 424,
	TOO_EARLY = 425,
	UPGRADE_REQUIRED = 426,
	PRECONDITION_REQUIRED = 428,
	TOO_MANY_REQUESTS = 429,
	REQUEST_HEADER_FIELDS_TOO_LARGE = 431,
	UNAVAILABLE_FOR_LEGAL_REASONS = 451,

	INTERNAL_SERVER_ERROR = 500,
	NOT_IMPLEMENTED = 501,
	BAD_GATEWAY = 502,
	SERVICE_UNAVAILABLE = 503,
	GATEWAY_TIMEOUT = 504,
	HTTP_VERSION_NOT_SUPPORTED = 505,
	VARIANT_ALSO_NEGOTIATES = 506,
	INSUFFICIENT_STORAGE = 507,
	LOOP_DETECTED = 508,
	NOT_EXTENDED = 510,
	NETWORK_AUTHENTICATION_REQUIRED = 511,
}

const HttpStatusNames = {
	CONTINUE: 'CONTINUE',
	SWITCHING_PROTOCOLS: 'SWITCHING_PROTOCOLS',
	PROCESSING: 'PROCESSING',
	EARLY_HINTS: 'EARLY_HINTS',

	OK: 'OK',
	CREATED: 'CREATED',
	ACCEPTED: 'ACCEPTED',
	NON_AUTHORITATIVE_INFORMATION: 'NON_AUTHORITATIVE_INFORMATION',
	NO_CONTENT: 'NO_CONTENT',
	RESET_CONTENT: 'RESET_CONTENT',
	PARTIAL_CONTENT: 'PARTIAL_CONTENT',
	MULTI_STATUS: 'MULTI_STATUS',
	ALREADY_REPORTED: 'ALREADY_REPORTED',
	IM_USED: 'IM_USED',

	MULTIPLE_CHOICES: 'MULTIPLE_CHOICES',
	MOVED_PERMANENTLY: 'MOVED_PERMANENTLY',
	FOUND: 'FOUND',
	SEE_OTHER: 'SEE_OTHER',
	NOT_MODIFIED: 'NOT_MODIFIED',
	USE_PROXY: 'USE_PROXY',
	TEMPORARY_REDIRECT: 'TEMPORARY_REDIRECT',
	PERMANENT_REDIRECT: 'PERMANENT_REDIRECT',

	BAD_REQUEST: 'BAD_REQUEST',
	UNAUTHORIZED: 'UNAUTHORIZED',
	PAYMENT_REQUIRED: 'PAYMENT_REQUIRED',
	FORBIDDEN: 'FORBIDDEN',
	NOT_FOUND: 'NOT_FOUND',
	METHOD_NOT_ALLOWED: 'METHOD_NOT_ALLOWED',
	NOT_ACCEPTABLE: 'NOT_ACCEPTABLE',
	PROXY_AUTHENTICATION_REQUIRED: 'PROXY_AUTHENTICATION_REQUIRED',
	REQUEST_TIMEOUT: 'REQUEST_TIMEOUT',
	CONFLICT: 'CONFLICT',
	GONE: 'GONE',
	LENGTH_REQUIRED: 'LENGTH_REQUIRED',
	PRECONDITION_FAILED: 'PRECONDITION_FAILED',
	PAYLOAD_TOO_LARGE: 'PAYLOAD_TOO_LARGE',
	URI_TOO_LONG: 'URI_TOO_LONG',
	UNSUPPORTED_MEDIA_TYPE: 'UNSUPPORTED_MEDIA_TYPE',
	RANGE_NOT_SATISFIABLE: 'RANGE_NOT_SATISFIABLE',
	EXPECTATION_FAILED: 'EXPECTATION_FAILED',
	I_AM_A_TEAPOT: 'I_AM_A_TEAPOT',
	MISDIRECTED_REQUEST: 'MISDIRECTED_REQUEST',
	UNPROCESSABLE_ENTITY: 'UNPROCESSABLE_ENTITY',
	LOCKED: 'LOCKED',
	FAILED_DEPENDENCY: 'FAILED_DEPENDENCY',
	TOO_EARLY: 'TOO_EARLY',
	UPGRADE_REQUIRED: 'UPGRADE_REQUIRED',
	PRECONDITION_REQUIRED: 'PRECONDITION_REQUIRED',
	TOO_MANY_REQUESTS: 'TOO_MANY_REQUESTS',
	REQUEST_HEADER_FIELDS_TOO_LARGE: 'REQUEST_HEADER_FIELDS_TOO_LARGE',
	UNAVAILABLE_FOR_LEGAL_REASONS: 'UNAVAILABLE_FOR_LEGAL_REASONS',

	INTERNAL_SERVER_ERROR: 'INTERNAL_SERVER_ERROR',
	NOT_IMPLEMENTED: 'NOT_IMPLEMENTED',
	BAD_GATEWAY: 'BAD_GATEWAY',
	SERVICE_UNAVAILABLE: 'SERVICE_UNAVAILABLE',
	GATEWAY_TIMEOUT: 'GATEWAY_TIMEOUT',
	HTTP_VERSION_NOT_SUPPORTED: 'HTTP_VERSION_NOT_SUPPORTED',
	VARIANT_ALSO_NEGOTIATES: 'VARIANT_ALSO_NEGOTIATES',
	INSUFFICIENT_STORAGE: 'INSUFFICIENT_STORAGE',
	LOOP_DETECTED: 'LOOP_DETECTED',
	NOT_EXTENDED: 'NOT_EXTENDED',
	NETWORK_AUTHENTICATION_REQUIRED: 'NETWORK_AUTHENTICATION_REQUIRED',
};

class BaseError extends Error {
	public readonly name: string;
	public readonly httpCode: HttpStatusCode;

	constructor(name: string, httpCode: HttpStatusCode, message: string) {
		super(message);
		Object.setPrototypeOf(this, new.target.prototype);
		this.name = name;
		this.httpCode = httpCode;

		Error.captureStackTrace(this);
	}
}

class InternalError extends BaseError {
	constructor(message: string) {
		super(HttpStatusNames.INTERNAL_SERVER_ERROR, HttpStatusCode.INTERNAL_SERVER_ERROR, message);
	}
}

class ConflictError extends BaseError {
	constructor(message: string) {
		super(HttpStatusNames.CONFLICT, HttpStatusCode.CONFLICT, message);
	}
}

class UnauthorizedError extends BaseError {
	constructor(message: string) {
		super(HttpStatusNames.UNAUTHORIZED, HttpStatusCode.UNAUTHORIZED, message);
	}
}

class NotFoundError extends BaseError {
	constructor(message: string) {
		super(HttpStatusNames.NOT_FOUND, HttpStatusCode.NOT_FOUND, message);
	}
}

export {
	BaseError,
	ConflictError,
	HttpStatusCode,
	HttpStatusNames,
	InternalError,
	NotFoundError,
	UnauthorizedError,
};
